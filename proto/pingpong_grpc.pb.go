// pingpong.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: pingpong.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlayerService_StartNewMatch_FullMethodName = "/pingpong.PlayerService/StartNewMatch"
	PlayerService_PlayerAPing_FullMethodName   = "/pingpong.PlayerService/PlayerAPing"
	PlayerService_PlayerBPing_FullMethodName   = "/pingpong.PlayerService/PlayerBPing"
	PlayerService_GetMatch_FullMethodName      = "/pingpong.PlayerService/GetMatch"
	PlayerService_GetMatchByID_FullMethodName  = "/pingpong.PlayerService/GetMatchByID"
	PlayerService_TestDB_FullMethodName        = "/pingpong.PlayerService/TestDB"
	PlayerService_IsGameActive_FullMethodName  = "/pingpong.PlayerService/IsGameActive"
)

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	StartNewMatch(ctx context.Context, in *NewMatchRequest, opts ...grpc.CallOption) (*NewMatchResponse, error)
	PlayerAPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PlayerBPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*Match, error)
	GetMatchByID(ctx context.Context, in *GetMatchByIDRequest, opts ...grpc.CallOption) (*Match, error)
	TestDB(ctx context.Context, in *TestDBRequest, opts ...grpc.CallOption) (*TestDBResponse, error)
	IsGameActive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsGameActiveResponse, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) StartNewMatch(ctx context.Context, in *NewMatchRequest, opts ...grpc.CallOption) (*NewMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMatchResponse)
	err := c.cc.Invoke(ctx, PlayerService_StartNewMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerAPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, PlayerService_PlayerAPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) PlayerBPing(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, PlayerService_PlayerBPing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*Match, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Match)
	err := c.cc.Invoke(ctx, PlayerService_GetMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetMatchByID(ctx context.Context, in *GetMatchByIDRequest, opts ...grpc.CallOption) (*Match, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Match)
	err := c.cc.Invoke(ctx, PlayerService_GetMatchByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) TestDB(ctx context.Context, in *TestDBRequest, opts ...grpc.CallOption) (*TestDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDBResponse)
	err := c.cc.Invoke(ctx, PlayerService_TestDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) IsGameActive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsGameActiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsGameActiveResponse)
	err := c.cc.Invoke(ctx, PlayerService_IsGameActive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility.
type PlayerServiceServer interface {
	StartNewMatch(context.Context, *NewMatchRequest) (*NewMatchResponse, error)
	PlayerAPing(context.Context, *PingRequest) (*PingResponse, error)
	PlayerBPing(context.Context, *PingRequest) (*PingResponse, error)
	GetMatch(context.Context, *GetMatchRequest) (*Match, error)
	GetMatchByID(context.Context, *GetMatchByIDRequest) (*Match, error)
	TestDB(context.Context, *TestDBRequest) (*TestDBResponse, error)
	IsGameActive(context.Context, *emptypb.Empty) (*IsGameActiveResponse, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerServiceServer struct{}

func (UnimplementedPlayerServiceServer) StartNewMatch(context.Context, *NewMatchRequest) (*NewMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNewMatch not implemented")
}
func (UnimplementedPlayerServiceServer) PlayerAPing(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerAPing not implemented")
}
func (UnimplementedPlayerServiceServer) PlayerBPing(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerBPing not implemented")
}
func (UnimplementedPlayerServiceServer) GetMatch(context.Context, *GetMatchRequest) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedPlayerServiceServer) GetMatchByID(context.Context, *GetMatchByIDRequest) (*Match, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchByID not implemented")
}
func (UnimplementedPlayerServiceServer) TestDB(context.Context, *TestDBRequest) (*TestDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDB not implemented")
}
func (UnimplementedPlayerServiceServer) IsGameActive(context.Context, *emptypb.Empty) (*IsGameActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGameActive not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}
func (UnimplementedPlayerServiceServer) testEmbeddedByValue()                       {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlayerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_StartNewMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).StartNewMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_StartNewMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).StartNewMatch(ctx, req.(*NewMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerAPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerAPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_PlayerAPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerAPing(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_PlayerBPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).PlayerBPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_PlayerBPing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).PlayerBPing(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetMatchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetMatchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetMatchByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetMatchByID(ctx, req.(*GetMatchByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_TestDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).TestDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_TestDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).TestDB(ctx, req.(*TestDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_IsGameActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).IsGameActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_IsGameActive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).IsGameActive(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartNewMatch",
			Handler:    _PlayerService_StartNewMatch_Handler,
		},
		{
			MethodName: "PlayerAPing",
			Handler:    _PlayerService_PlayerAPing_Handler,
		},
		{
			MethodName: "PlayerBPing",
			Handler:    _PlayerService_PlayerBPing_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _PlayerService_GetMatch_Handler,
		},
		{
			MethodName: "GetMatchByID",
			Handler:    _PlayerService_GetMatchByID_Handler,
		},
		{
			MethodName: "TestDB",
			Handler:    _PlayerService_TestDB_Handler,
		},
		{
			MethodName: "IsGameActive",
			Handler:    _PlayerService_IsGameActive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingpong.proto",
}

const (
	TableService_StartGame_FullMethodName   = "/pingpong.TableService/StartGame"
	TableService_ReceiveBall_FullMethodName = "/pingpong.TableService/ReceiveBall"
)

// TableServiceClient is the client API for TableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableServiceClient interface {
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	ReceiveBall(ctx context.Context, in *ReceiveBallRequest, opts ...grpc.CallOption) (*ReceiveBallResponse, error)
}

type tableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableServiceClient(cc grpc.ClientConnInterface) TableServiceClient {
	return &tableServiceClient{cc}
}

func (c *tableServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, TableService_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableServiceClient) ReceiveBall(ctx context.Context, in *ReceiveBallRequest, opts ...grpc.CallOption) (*ReceiveBallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveBallResponse)
	err := c.cc.Invoke(ctx, TableService_ReceiveBall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableServiceServer is the server API for TableService service.
// All implementations must embed UnimplementedTableServiceServer
// for forward compatibility.
type TableServiceServer interface {
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	ReceiveBall(context.Context, *ReceiveBallRequest) (*ReceiveBallResponse, error)
	mustEmbedUnimplementedTableServiceServer()
}

// UnimplementedTableServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTableServiceServer struct{}

func (UnimplementedTableServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedTableServiceServer) ReceiveBall(context.Context, *ReceiveBallRequest) (*ReceiveBallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveBall not implemented")
}
func (UnimplementedTableServiceServer) mustEmbedUnimplementedTableServiceServer() {}
func (UnimplementedTableServiceServer) testEmbeddedByValue()                      {}

// UnsafeTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableServiceServer will
// result in compilation errors.
type UnsafeTableServiceServer interface {
	mustEmbedUnimplementedTableServiceServer()
}

func RegisterTableServiceServer(s grpc.ServiceRegistrar, srv TableServiceServer) {
	// If the following call pancis, it indicates UnimplementedTableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TableService_ServiceDesc, srv)
}

func _TableService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableService_ReceiveBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveBallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableServiceServer).ReceiveBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TableService_ReceiveBall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableServiceServer).ReceiveBall(ctx, req.(*ReceiveBallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TableService_ServiceDesc is the grpc.ServiceDesc for TableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pingpong.TableService",
	HandlerType: (*TableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _TableService_StartGame_Handler,
		},
		{
			MethodName: "ReceiveBall",
			Handler:    _TableService_ReceiveBall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pingpong.proto",
}
